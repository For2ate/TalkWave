// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using TalkWave.Chat.Data.Contexts;

#nullable disable

namespace TalkWave.Chat.Data.Migrations
{
    [DbContext(typeof(ChatsContext))]
    partial class ChatsContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("TalkWave.Chat.Data.Entities.ChatEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<Guid>("CreatedBy")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsGroupChat")
                        .HasColumnType("boolean");

                    b.Property<Guid?>("LastMessageId")
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedAt")
                        .HasDatabaseName("IX_Chats_CreatedAt");

                    b.HasIndex("IsGroupChat")
                        .HasDatabaseName("IX_Chats_IsGroupChat");

                    b.HasIndex("LastMessageId")
                        .IsUnique()
                        .HasDatabaseName("IX_Chats_LastMessageId");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("TalkWave.Chat.Data.Entities.ChatMemberEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<int>("Role")
                        .HasColumnType("integer");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ChatId")
                        .HasDatabaseName("IX_ChatMembers_ChatId");

                    b.HasIndex("UserId")
                        .HasDatabaseName("IX_ChatMembers_UserId");

                    b.HasIndex("UserId", "ChatId")
                        .IsUnique()
                        .HasDatabaseName("IX_ChatMembers_UserId_ChatId");

                    b.ToTable("ChatMembers");
                });

            modelBuilder.Entity("TalkWave.Chat.Data.Entities.MessageEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ChatId")
                        .HasColumnType("uuid");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasMaxLength(10000)
                        .HasColumnType("character varying(10000)");

                    b.Property<Guid>("SenderId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("SentAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("Status")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ChatId")
                        .HasDatabaseName("IX_Messages_ChatId");

                    b.HasIndex("SenderId")
                        .HasDatabaseName("IX_Messages_SenderId");

                    b.HasIndex("SentAt")
                        .HasDatabaseName("IX_Messages_SentAt");

                    b.HasIndex("ChatId", "SentAt")
                        .HasDatabaseName("IX_Messages_ChatId_SentAt");

                    b.ToTable("Messages");
                });

            modelBuilder.Entity("TalkWave.Chat.Data.Entities.UserEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("TalkWave.Chat.Data.Entities.ChatEntity", b =>
                {
                    b.HasOne("TalkWave.Chat.Data.Entities.MessageEntity", "LastMessage")
                        .WithOne()
                        .HasForeignKey("TalkWave.Chat.Data.Entities.ChatEntity", "LastMessageId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("LastMessage");
                });

            modelBuilder.Entity("TalkWave.Chat.Data.Entities.ChatMemberEntity", b =>
                {
                    b.HasOne("TalkWave.Chat.Data.Entities.ChatEntity", "Chat")
                        .WithMany("Members")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TalkWave.Chat.Data.Entities.UserEntity", "User")
                        .WithMany("ChatMembers")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("User");
                });

            modelBuilder.Entity("TalkWave.Chat.Data.Entities.MessageEntity", b =>
                {
                    b.HasOne("TalkWave.Chat.Data.Entities.ChatEntity", "Chat")
                        .WithMany("Messages")
                        .HasForeignKey("ChatId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TalkWave.Chat.Data.Entities.UserEntity", "Sender")
                        .WithMany("Messages")
                        .HasForeignKey("SenderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Chat");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("TalkWave.Chat.Data.Entities.ChatEntity", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("Messages");
                });

            modelBuilder.Entity("TalkWave.Chat.Data.Entities.UserEntity", b =>
                {
                    b.Navigation("ChatMembers");

                    b.Navigation("Messages");
                });
#pragma warning restore 612, 618
        }
    }
}
