using AutoFixture;
using AutoFixture.AutoMoq;
using AutoFixture.Xunit2;
using AutoMapper;
using FluentAssertions;
using Moq;
using TalkWave.Chat.Api.Core.Services;
using TalkWave.Chat.Data.Entities;
using TalkWave.Chat.Data.Interfaces;
using TalkWave.Chat.Models.Messages.Request;
using TalkWave.Chat.Models.Messages.Response;
using Xunit;

namespace TalkWave.Chat.Tests.UnitTests.Services {

    public class MessageServiceTests {

        private readonly IFixture _fixture;
        private readonly Mock<IMessagesRepository> _mockRepository;
        private readonly Mock<IMapper> _mockMapper;
        private readonly MessageService _service;

        public MessageServiceTests() {
            _fixture = new Fixture()
                .Customize(new AutoMoqCustomization())
                .Customize(new OmitOnRecursionBehaviorCustomization());

            _mockRepository = _fixture.Freeze<Mock<IMessagesRepository>>();
            _mockMapper = _fixture.Freeze<Mock<IMapper>>();
            _service = _fixture.Create<MessageService>();
        }

        // Вспомогательный класс для настройки поведения рекурсии
        private class OmitOnRecursionBehaviorCustomization : ICustomization {
            public void Customize(IFixture fixture) {
                fixture.Behaviors.OfType<ThrowingRecursionBehavior>().ToList()
                    .ForEach(b => fixture.Behaviors.Remove(b));
                fixture.Behaviors.Add(new OmitOnRecursionBehavior());
            }
        }

        [Fact]
        public async Task GetMessageById_ExistingMessage_ReturnsMappedResponse() {

            // Arrange
            var messageId = Guid.NewGuid();
            var messageEntity = _fixture.Build<MessageEntity>()
                .With(x => x.Id, messageId)
                .Create();

            var expectedResponse = _fixture.Build<MessageFullResponseModel>()
                .With(x => x.Id, messageId)
                .Create();

            _mockRepository.Setup(x => x.GetByIdAsync(messageId))
                .ReturnsAsync(messageEntity);

            _mockMapper.Setup(x => x.Map<MessageFullResponseModel>(messageEntity))
                .Returns(expectedResponse);

            // Act
            var result = await _service.GetMessageById(messageId);

            // Assert
            result.Should().BeEquivalentTo(expectedResponse);
            _mockRepository.Verify(x => x.GetByIdAsync(messageId), Times.Once);

        }

        [Fact]
        public async Task GetMessageById_MessageNotFound_ThrowsException() {

            // Arrange
            var messageId = Guid.NewGuid();
            _mockRepository.Setup(x => x.GetByIdAsync(messageId))
                .ReturnsAsync((MessageEntity?)null);

            // Act & Assert
            await Assert.ThrowsAsync<Exception>(() => _service.GetMessageById(messageId));
        }

        [Theory, AutoData]
        public async Task GetNMessagesFromMessageAsync_AutoGeneratedData_ReturnsMessages(
            GetNMessagesRequestModel model) {

            // Arrange
            var take = Math.Abs(model.Take) % 30;
            model.Take = take;

            var testMessages = _fixture.Build<MessageEntity>()
                .Without(x => x.Chat)
                .Without(x => x.Sender)
                .CreateMany(10)
                .ToList();

            _mockRepository.Setup(x => x.GetNMessagesFromMessageAsync(model.ChatId, model.MessageId, take))
                .ReturnsAsync(testMessages.Take(take).ToList());

            // Act
            var result = await _service.GetNMessagesFromMessageAsync(model);

            // Assert
            result.Should().HaveCountLessThanOrEqualTo(take);

        }

        [Theory, AutoData]
        public async Task GetNMessagesFromMessageAsync_ReturnsEmptyList_WhenNoMessages(
            GetNMessagesRequestModel model) {

            // Arrange
            _mockRepository.Setup(x => x.GetNMessagesFromMessageAsync(model.ChatId, model.MessageId, model.Take))
                .ReturnsAsync(new List<MessageEntity>());

            // Act
            var result = await _service.GetNMessagesFromMessageAsync(model);

            // Assert
            result.Should().BeEmpty();

        }

        [Fact]
        public async Task GetNMessagesFromMessageAsync_ThrowsException_OnRepositoryError() {

            // Arrange
            var model = _fixture.Create<GetNMessagesRequestModel>();
            _mockRepository.Setup(x => x.GetNMessagesFromMessageAsync(model.ChatId, model.MessageId, model.Take))
                .ThrowsAsync(new Exception("DB error"));

            // Act & Assert
            await Assert.ThrowsAsync<Exception>(() => _service.GetNMessagesFromMessageAsync(model));

        }

        [Fact]
        public async Task GetNMessagesFromMessageAsync_ReturnsEmpty_WhenTakeIsZero() {

            // Arrange
            var model = new GetNMessagesRequestModel { Take = 0 };

            // Act
            var result = await _service.GetNMessagesFromMessageAsync(model);

            // Assert
            result.Should().BeEmpty();
            _mockRepository.Verify(
                x => x.GetNMessagesFromMessageAsync(It.IsAny<Guid>(), It.IsAny<Guid>(), 0),
                Times.Never);

        }

    }

}